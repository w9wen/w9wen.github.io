var store = [{
        "title": "Edge Case: Nested and Mixed Lists",
        "excerpt":"Nested and mixed lists are an interesting beast. It’s a corner case to make sure that      Lists within lists do not break the ordered list numbering order   Your list styles go deep enough.   Ordered – Unordered – Ordered      ordered item   ordered item            unordered       unordered                 ordered item       ordered item           ordered item   ordered item   Ordered – Unordered – Unordered      ordered item   ordered item            unordered       unordered                 unordered item       unordered item           ordered item   ordered item   Unordered – Ordered – Unordered      unordered item   unordered item            ordered       ordered                    unordered item           unordered item                           unordered item   unordered item   Unordered – Unordered – Ordered      unordered item   unordered item            unordered       unordered                    ordered item           ordered item                           unordered item   unordered item  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case","lists","markup"],
        "url": "http://localhost:4000/edge%20case/edge-case-nested-and-mixed-lists/",
        "teaser":null},{
        "title": "Welcome to Jekyll!",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["jekyll","update"],
        "tags": [],
        "url": "http://localhost:4000/jekyll/update/welcome-to-jekyll/",
        "teaser":null},{
        "title": "My blog created using Jekyll",
        "excerpt":"想要為自己留下一些足跡，建立自己部落格的心願已經很久了；有許多非常流行的部落格，提供技術人員紀錄開發日誌，如DotBlog、隨意窩。   不過，每個部落格都有自己的編輯器、自己的範本套用以及特殊的文字表現方式，一方面覺得好像和技術人員所學不太相符(我連寫文章也想要git commit -m \"新的文章出爐囉。\")，一方面其實也是懶得學習進取😵。   開發人員平台  開發人員非常需要網路資源，有了技術上的問題，大多會求助Google大神，而其實這些搜尋大多導到CodeProject、Stack Overflow這些開發平台，而我也一一建立了帳號，曾有雄心壯志寫些技術性的文章，但懶得學編輯器的個性依舊，當然也是失敗收場😞。   GitHub  多年之後，開源程式碼流行了起來，各式開源網站蔚為風潮，其中GitHub的崛起，等同新創代名詞之後，開發技術的查詢，有很大一部份都轉移到這個開發者平台，當時的我，連git是什麼，都還不知道。   程式碼版控  我在裕隆電能期間，是學習Web以及Windows Forms以外技術的開始，當時的是一人技術團隊，自以為好大的Team，自己架了VisualSVN的Server，自己建帳號、自己管理自己，一堆log message清一色是William😄。   開始我的git人生  在懵懵懂懂之中，進入了緯創資通，所屬部門早已使用git進行版本控管，git和svn觀念完全不同，卻使用相同的comment，沒學過卻直接上戰場，當然處處是地雷💥；於是下定決心要把git練起來，30 天精通 Git 版本控管-Will保哥，就成為入門關鍵，為了專案快馬加鞭將練習走一次，縮短為10日完成，那個git push的日子還好過下去了。   靜態部落格編輯器   離題了嗎  其實並沒有，寫文章的雄心壯志仍在我心💙，當知道了git，一堆技術部落格(尤其是專案程式部落格)都用了一種特殊簡潔的語法Markdown     git - 版本控管。   Markdown - 統一簡潔的文章編輯語法。 這都是我要的，事情就結束了嗎?並沒有，尋尋覓覓又一堆技術與我相見歡   MDwiki  這是我第一個找的和我需求相符合的套件，可以用Markdown撰寫技術文章，可做出很酷的文件網頁，又可自訂網站色彩，但是新的文章上板有點麻煩，重點是此套件更新速度很慢，當時我還以為已經掛點了，因此就放棄了。     最近發現此作者又活過來了，有興趣的可以試試喔MDwiki，但也已經是一個月前的事，一個人的力量總是薄弱的，更新慢是正常的    Jekyll     這篇文章的重點🌋，文章也快要尾聲了    當然還有一堆靜態網頁編輯器，但Jekyll算是第一名👍，而且研究後發現，天啊，怎麼有這種超強部落格產生器。     只要輸入jekyll new myBlog，就產生了您的第一個網站。   可以制定自己的Theme，官方提供了相當豐富的Jekyll Template，您也可以上網搜尋，真不知道為什麼這麼多人有時間做這些範本。   GitHub官方完全支援，請參考GitHub Pages using Jekyll，我的部落格就是架在上面。   全靜態網頁，完全不使用資料庫。   第三方套件，如Disqus您就可以在文章下面留言給我喔、Algolia等，而且設定相當方便。   資料夾有分_posts、drafts、pages_等，也就是說，您可以撰寫部落格的文章，也可以寫草稿，也可以設計頁面，並且使用程式碼編輯器撰寫並維護文章。   應該還有，日後讓我慢慢到來      以上是我敘述的好處，但困難與痛點卻也遍地開花:sunflower:    使用Jekyll的好處之前，要先經歷一翻磨難😱     先裝個Ruby吧。            macOS：作業系統已有預帶，但系統會升級，Ruby當然也要升級，我是用Homebrew，可是升級步驟現在在我腦袋是一片空白😫，這是建立部落格紀錄的好處~~。       Windows：不知道微軟得罪多少人，Ruby官方並不支援；要由RubyInstaller for Windows下載安裝，還好去年的新版，已經進步多了，步驟上簡化許多，這些人真是佛心來著。           選個適合自己的程式碼編輯器吧，我最❤️Atom，現在支援macOS與Windows雙系統的應用程式已經是基本的，重要的是我非常喜灣這個編輯器的版面配置、以及套件非常豐富。   彈性大，表示有一定的學習空間，才能隨心所欲地並發揮工具的好處，於是我在Udemy找了一個課程Jekyll: make fast, secure static sites and blogs with Jekyll練習了一次，後來又在YouTube找到一位打扮很酷的講師，這個課程免費喔Jekyll - Static Site Generator ，然後我又走了一遍。   豐富的Template，卻是我卡關最久的部分，甚至一度想放棄，原因是這麼多的Template，要如何找到適合你的，尤其是又要發布文章，又要寫文件，真的茫茫大海，一直沒遇到我要的，就這樣經過了一年，當中停滯了10個月~~，真是浪費我上課的錢；技術人員沒有自己的部落格要怎麼紀錄自己走過的路呢，今年又重拾jekyll，先把自己想要的部落格樣子畫在紙上，拿著這個藍圖，上網尋找，終於找到了😍，請看下文介紹。   Minimal Mistakes Jekyll Theme  這真是個偉大的作品，作者非常勤勞的更新程式，每次上GitHub看到作品的commit幾乎都是幾小時前；我的部落格就是用這個Template。     建立這個部落格時，本想完全用英文撰寫，因為希望走上國際舞台(想太多了，想用英文撰寫也是卡關原因之一，現在用中文撰寫暢快多了)，而這這個範本多語系，竟然可以設定繁體中文，若沒有這個選項，我也不會選用了。   符合我想要撰寫文章，又可編寫文件的需求。   提供了文章搜尋功能，使用了很時髦的Algolia(雖然目前使用上有問題，但有個Mark感覺還是很酷🆒)。   簡潔清晰的頁面操作。   待我繼續敘述，先上我發布文章吧  ","categories": ["jekyll"],
        "tags": [],
        "url": "http://localhost:4000/jekyll/my-blog-created-using-jekyll/",
        "teaser":null},{
        "title": "Jekyll Tip",
        "excerpt":"我的部落格是由jekyll建置，使用了theme:Minimal Mistakes，內容如下   Jekyll  Jekyll是一套靜態網頁編輯器，有以下的特點     文件可以使用Markdown語法撰寫，每篇文章都是一個Markdown檔案。   純靜態網頁，完全不使用資料庫，因此效能非常好。            我這樣算，一天一篇文章，一年不過365篇，也只是一個365個文檔的網站(人生能有幾個365天❓)。           可以自己編寫網站的HTML、CSS來設計自己的風格，不過我實在很懶，寧願花兩、三個月的時間找Template，也不想自己設計😄；找到自己屬意的範本後，可以在HTML與CSS進行微調。   適合程式技術人員使用開發工具一顆熱血的心❤️(這邊就要貼個圖展示一下，不是蓋的，寫文章就像寫程式，左邊有專案結構，文章就在中間撰寫，右邊有預覽，下方的窗格可以使用命令列，在狀態列也可以看到GitHub的命令操作，是不是很變態~~)。    GitHub官方完全支援，具有兩種模式(用我自己的方式敘述)            帳戶的部落格形式，用master的branch就可以在GitHub上自動編譯，編譯有問題還會回報到你的信箱。       專案的部落格，要建立gh-pages的branch來commit自己的jekyll網站。           有超多超讓你暈眩的Template，但如第一篇文章所述，要先設定好自己部落格想要的形式，再來找適合的Template。   Jekyll是由Ruby語言撰寫，所以要使用Jekyll，就要安裝Ruby、Gem、Bundle(請不要問我這些是什麼，我只是為了Jekyll、所以安裝~~我不是在唱歌)   Ruby   macOS   Windows     ruby 2.5.0p0 (2017-12-25 revision 61468) [x64-mingw32]    Ruby官方並不支援Windows，所以要另外使用RubyInstaller來安裝，現在已經不需要再另外安裝DevKit，比以前簡單多了。   Jekyll  有了Ruby，你只要jekyll new myBlog，就建立起了我的部落格了。  Minimal Mistakes Jekyll Theme  這是我一直提到、我找到最滿意最滿意的Template，提供了以下的服務  積極的更新  Skin的選項  搜尋服務的選項  留言管理的選項  社群分享的選項  分析服務的選項  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/jekyll-tip/",
        "teaser":null},{
        "title": "[Vision] Azure Face API 臉部驗證 (一) 架構與設定",
        "excerpt":"目前(2018-03-21)雲端的人臉比對驗證，Azure以及AWS的Amazon Rekognition均有提供，本篇介紹Azure的人臉比對實作。   Microsoft Face API  微軟的Face API服務在Azure屬於AI + Cognitive Services的分類 分為以下的功能使用     Face Verification 臉部驗證   Face Recognition 臉部偵測   Finding Similar Face 人臉搜尋   Face Grouping   Face Identificaion   Face Verification  開始臉部驗證體驗的旅程，enjoy😅  在Azure Portal建立     建立新的Resources，選擇 AI + Cognitive Services中的Face API(如上圖)   給予特定的名稱，在選擇Location，我會盡量和其他相關的Resources選擇同一地區，或是靠近，因為聽說會有跨地域效能的問題，選擇同一個地域，效能會快一點。   因為只是試用，價錢選擇免費的。    建立完成，存取使用最重要的就是這個API的連結和Keys  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/vision-azure-faceapi-verification-1/",
        "teaser":null},{
        "title": "[Xamarin.Forms] 安裝CurrentActivity Plugin藉以存取Xamarin.Android Activity",
        "excerpt":"在Xamarin Forms跨平台存取Android的Activity，需要安裝與設定CurrentActivityPlugin才能達成，比如使用MediaPlugin在Android就需要用到，請參考Access the Current Android Activity from Anywhere，安裝步驟請參考Xamarin.Forms CurrentActivityPlugin           安裝CurrentActivity Plugin 在Xamarin.Android專案使用Manage Nuget Packages找到Plugin.CurrentActivity，目前版本是v1.0.1，最後更新時間是2015-12-19，但已看到有beta版釋出，比較放心勇敢地使用😸          新增一個名為”MainApplication.cs”的C# class            安裝CurrentActivity後會開啟readme.txt內容敘述中，說明了Xamarin.Android根目錄會安裝”MainApplication.cs”，這樣的敘述我認為應該是自動產生，但看起來並沒有，就自己建立吧。       在class加註[Application]。       “MainApplication”繼承Application, 以及Applicaion.IActivityLifecycleCallbacks。       用工具Implement IActivityLifecycleCallbacks的Interface(在IActivityLifecycleCallbacks的Interface上點選即可)。       增加一個constructor。       override OnCreate以及OnTerminate，分別加入RegisterActivityLifecycleCallbacks(this)以及UnregisterActivityLifecycleCallbacks(this)       在OnActivityCreated, OnActivityStarted, OnActivityResumed加入CrossCurrentActivity.Current.Activity = activity。           完整程式碼如下       [Application]   public class MainApplication : Application, Application.IActivityLifecycleCallbacks   {       protected MainApplication(IntPtr javaReference, JniHandleOwnership transfer) : base(javaReference, transfer)       {       }        public override void OnCreate()       {           base.OnCreate();           RegisterActivityLifecycleCallbacks(this);       }        public override void OnTerminate()       {           base.OnTerminate();           UnregisterActivityLifecycleCallbacks(this);       }        public void OnActivityCreated(Activity activity, Bundle savedInstanceState)       {           CrossCurrentActivity.Current.Activity = activity;       }        public void OnActivityResumed(Activity activity)       {           CrossCurrentActivity.Current.Activity = activity;       }        public void OnActivityStarted(Activity activity)       {           CrossCurrentActivity.Current.Activity = activity;       }   }           到這邊安裝設定完成，在跨專案存取Activity。  ","categories": ["Xamarin","Xamarin.forms","plugin"],
        "tags": [],
        "url": "http://localhost:4000/xamarin/xamarin.forms/plugin/install-currentactivity-plugin-access-xamarin-android-activity/",
        "teaser":null},{
        "title": "[Xamarin.Forms] 安裝Media Plugin跨平台存取相機或相簿",
        "excerpt":"在Xamarin.Forms的Core專案要實現跨平台存取照相機、攝影機或相簿，要安裝設定MediaPlugin，請參考MediaPlugin by James Montemagno。   為各平台建立權限   Xamarin.Android     打開專案屬性編輯Android Manifest，將WRITE_EXTERNAL_STORAGE 以及 READ_EXTERNAL_STORAGE打勾，而在Marshmallow上(不是每個API都需要，但Marshmallow使用者眾，就安裝好了)執行時要提示使用者使用Native時，便需要安裝PermissionPlugin，請在方案上按右鍵，使用Nuget管理員安裝在三個專案中，並在Xamarin.Android的MainActivity中override OnRequestPermissionsResult，程式碼如下       public override void OnRequestPermissionsResult(int requestCode, string[] permissions, [GeneratedEnum] Permission[] grantResults)   {       base.OnRequestPermissionsResult(requestCode, permissions, grantResults);       PermissionsImplementation.Current.OnRequestPermissionsResult(requestCode, permissions, grantResults);   }           安裝設定CurrentActivity Plugin   請參考[Xamarin.Forms] 安裝CurrentActivity Plugin藉以存取Xamarin.Android Activity   聲明裝置必須性，在AssemblyInfo.cs加入以下程式碼      [assembly: UsesFeature(\"android.hardware.camera\", Required = false)]  [assembly: UsesFeature(\"android.hardware.camera.autofocus\", Required = false)]           為了指定存取檔案資料夾，統一在AndroidManifest.xml的&lt;application&gt;進行以下配置          &lt;provider android:name=\"android.support.v4.content.FileProvider\"              android:authorities=\"${applicationId}.fileprovider\"              android:exported=\"false\"              android:grantUriPermissions=\"true\"&gt;         &lt;meta-data android:name=\"android.support.FILE_PROVIDER_PATHS\"                       android:resource=\"@xml/file_paths\"&gt;&lt;/meta-data&gt;      &lt;/provider&gt;          還沒完，我累了~~~😫，這是跨平台必經過程嗎?不過，先苦後甘 4.建立一個App存取檔案專屬的路徑，在Resrouces下建立一個名為”xml”的資料夾，底下增加一個名為”file_paths”的xml檔案，內容如下       &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;  &lt;paths xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;    &lt;external-files-path name=\"my_images\" path=\"Pictures\" /&gt;    &lt;external-files-path name=\"my_movies\" path=\"Movies\" /&gt;  &lt;/paths&gt;          結束….🔚~~~Android       Xamarin.iOS  這倒簡單了，就只需要在info.plist增加相機、相簿的權限宣告即可，請參考New iOS 10 Privacy Permission Settings。   安裝Media Plugin  在方案中幫所有的Xamarin專案安裝Xam.Plugin.Media      使用跨平台Plugin存取Native      Mdeia.plugin 初始化       await CrossMedia.Current.Initialize();           檢查相機與相簿模組       if (!CrossMedia.Current.IsCameraAvailable || !CrossMedia.Current.IsTakePhotoSupported)   {    await DisplayAlert(\"多媒體模組\", \"相機或相簿不支援\", \"確定\");    return;   }             檢查提示使用者開放存取權限       if (cameraStatus != PermissionStatus.Granted || storageStatus != PermissionStatus.Granted)   {    var results = await CrossPermissions.Current.RequestPermissionsAsync(new[] { Permission.Camera, Permission.Storage });    cameraStatus = results[Permission.Camera];    storageStatus = results[Permission.Storage];   }             在存取權限的情況下，取得相機或相簿，詳細設定可以參考Media Plugin的文件       if (cameraStatus == PermissionStatus.Granted &amp;&amp; storageStatus == PermissionStatus.Granted)   {   var file = await CrossMedia.Current.TakePhotoAsync(new StoreCameraMediaOptions   {       DefaultCamera = CameraDevice.Front, // Android無法執行       //AllowCropping = true,       //SaveToAlbum = true       //SaveMetaData = true,       //PhotoSize = PhotoSize.Medium,       //CompressionQuality = 92       //Directory = \"Sample\",       //Name = \"test.jpg\"   });    //var file = await CrossMedia.Current.PickPhotoAsync(new PickMediaOptions { });    if (file == null)       return;    //await DisplayAlert(\"File Location\", file.Path, \"OK\");    ImageShow.Source = ImageSource.FromStream(() =&gt;   {       var stream = file.GetStream();       return stream;   });   }   else   {   await DisplayAlert(\"使用者權限\", \"無法存取相機或相簿\", \"確定\");   //On iOS you may want to send your user to the settings screen.   //CrossPermissions.Current.OpenAppSettings();   }           iOS 看 Android Phone        Android 看 iPhone       ","categories": ["Xamarin","Xamarin.Forms","Plugin"],
        "tags": [],
        "url": "http://localhost:4000/xamarin/xamarin.forms/plugin/install-media-plugin-access-xamarin-native/",
        "teaser":null},{
        "title": "[Cross Platform] 設定IISExpress將網站分享至內部網路存取",
        "excerpt":"緣起  開發跨平台專案，時常需要同時了解Server與Client互動的關係與結果，過去，Server端一定要完成API的設計與開發，Client端才能依據文件與端口進行開發與測試，在Visaul Studio的跨平台方案，將Server與Client放在一起，本篇將介紹如何在內網的手機App存取內網的Server，以便快速除錯平衡兩邊的開發。   目標  時常會需要Server端與Client端同時執行方便除錯與預覽，在Visual Studio開發時，預設會使用IIS Express提供虛擬網站進行執行時期的偵錯，設定環境讓Client端包含手機存取IISExpress。   不適用  本章內容以內網固定IP的方式進行設定，當設定進行版控時，另一位開發者的電腦將不適用此設定，會造成專案無法載入的問題。   網路環境設置     取得IISExpress執行時期的Port，在防火牆開啟規則讓遠端的Client可以通過            開啟Visual Studio 網站專案屬性頁，在Web的頁籤中，找到Project Url，這邊有預設的Port號。         開啟防火牆設定，選取進階設定，在輸入規則新增規則設定本機連接埠。            開啟可供存取的固定IP位址            取得本機聯網的IPv4位址         ipconfig                                     原始網站預設的位址為localhost，要改為固定IP，要先改applicationhost的設定，否則直接在專案改會出錯，無法更動。             開啟applicationhost.config有兩種方式，一種是執行網站後，由IISExpress的快速啟動列開啟，另一種是直接在方案下找到.vs -&gt; config開啟後進行編輯。       找到網站設定的tag，因為有可能這個專案被重複建立了幾次，因此會有id作為辨認，可以直接使用Port來找到正確的設定位置。       將localhost，改為IP位址後存檔            此時將網站屬性的Project Url由localhost改為固定IP即可   測試  由手機端App的網頁開啟本機的IISExpress固定IP網站，理論上只要Client端的瀏覽器可以存取網站，開發的App或網頁，都可以存取網站的WebAPI。  執行ASP.NET專案     很酷的，現在增強了Chrome做Debug瀏覽器的功能    執行出固定IP與Port的網站(馬賽克搞得像國王的新衣嗎?哈，還是要保持資訊安全的習慣😄)      [macOS Safari]            [iPhone Safari]            [Android Google Chrome]             Done!:metal:  ","categories": ["IISExpress"],
        "tags": [],
        "url": "http://localhost:4000/iisexpress/cross-platform-add-the-iis-express-setting-for-intranet-access/",
        "teaser":null},{
        "title": "解決更新Ruby Sass後Jeklly編譯的錯誤",
        "excerpt":"更新Ruby的套件  gem update bundle  只要更新到sass的套件，都會出現下列的錯誤    其實看這樣的訊息，只知道應該是css編碼錯誤，但完全不知道從何查起，後來終於搜尋到這篇文章解決中文註解發生錯誤，才找到了方向，原來是升級了sass，預設沒有UTF-8，於是在以下路徑找到sass.rb  D:\\Ruby25-x64\\lib\\ruby\\gems\\2.5.0\\gems\\sass-3.5.6\\lib\\sass.rb  設定指令加到最後一行  Encoding.default_external = Encoding.find('utf-8')  重新執行  jekyll serve --draft  完成     ","categories": ["jekyll","ruby","sass"],
        "tags": [],
        "url": "http://localhost:4000/jekyll/ruby/sass/solved-update-ruby-sass-jeklly-compile-error/",
        "teaser":null},{
        "title": "[Chatbot] 使用Messaging API(C# SDK)建立LINE Bot WebAPI(一)",
        "excerpt":"緣起  Chatbot為近年最為火紅的應用服務，越多人使用的平台，越能有開發多元化層面的效果；Facebook、Skype均有提供Chatbot的開發介面，而且Microsoft Azure也提供了Bot Services提供跨平台應用，但在東亞、東南亞使用者眾的LINE平台並沒有整合進來，需要單獨做串接。   :beginner: LINE提供開發者打造LINE Chatbot已有一段時間，去年BOT API改名為LINE Messaging API以符合應用情境，畢竟建立Bot核心在於WebAPI的開發端。   🚀LINE Messaging API使用RESTful的通訊格式，雖然知道，使用原生的API最為安全可靠，但是最後還是被 😩懶惰 擊垮，開始了尋覓SDK的生涯；LINE官方提供的SDK，有Java、PHP、等，但沒有提供C#(沒關係，已經習慣了)，但還是有社群善心人事提供了C#版本。      官網推薦了兩個社群開發的C# SDK，也有台灣人自己提供的版本，當然沒辦法馬上比較出優劣，只能用Github上的更新日期以及提供的Template來決定了。 我這邊是使用pierre3/LineMessagingApi 這個版本的SDK，若想要使用SDK更深入了解學習，我特別推薦.NET Walker所撰寫的LineBot系列    目標  建立的LINE Chatbot可以加入好友，並且進行初步訊息的溝通；分為幾個步驟，以下圖(取自於LINE Developer)來說，第一步先要在Messaging API建立帳號、設定一個LINE Channel，然後建立一個WebAPI(YOUR SYSTEM)上面建立Webhook的應用程式。      LINE Messaging API  首先要先申請帳號加入LINE Developer，以此帳號登入Console後，要建立一個Provider，請參考LINE Developer 官方說明，中文則推薦.NET Walker的Line Bot申請流程      使用LineMessagingApi SDK範本建立WebAPI  我們現在要來做圖示的YOUR SYSTEM這一段   。     請先下載安裝LINE Bot C# Template；這位日本好手已經是雲端能者，範本已經結合Azure Storage Account，也提供了Azure Function的範本。   建立LINEBotApplication WebAPI            在Visual Studio，建立新專案，找到Cloud分類，往下拉就可以看到三個LINE Bot的範本，選擇LINEBotApplication。           這是一個WebAPI的專案結構         Controllers資料夾中的LINEBotController就是要註冊我們在LINE Developers Console中Channel Settins Webhook。       CloudStorage資料夾中定義存取Media資源以及事件的紀錄。       Root下的LineBotApp.cs，就是我們撰寫傳接LINE Messaging API的位置。           Web.config設定    以下由相關網站取得資料填入      &lt;appSettings&gt;    &lt;add key=\"ChannelSecret\" value=\"由LINE Developers Console取得(Channel secret)\" /&gt;    &lt;add key=\"ChannelAccessToken\" value=\"由LINE Developers Console取得(Channel accesss token)\" /&gt;    &lt;add key=\"StorageConnectionString\" value=\"由Azure Storage Account取得連線字串\" /&gt;  &lt;/appSettings&gt;       建立WebAPI網站            最快的方式是將網站發布到Azure Web App。       在LINE Developer Console啟用Webhooks，並將Azure Web App的WebAPI位置設定在Webhook URL，SSL是必須的，Azure Web App好處是預設啟用方便開發人員進行部署，只要將URL改為https即可(不建議產品類型)               完成了，只要將LINE Bot加入好友，就可以對話了~~ ，這個Template做得太貼心了💥。   測試       掃描LINE Developers Console中Channel所提供的QR code，加入有後，開始傳遞訊息。   加入好友會有初始訊息，可以在LINE Developers Console中設定            Auto-reply messages.       Greeting messages               傳遞文字，LINE Bot會回您相同的文字，傳遞貼圖，LINE Bot回傳您隨機抽樣的貼圖，傳遞Media，LINE Bot回傳您儲存在Azure Blob的位置。     Done:metal:  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/chatbot-create-line-bot-using-messageing-api-1/",
        "teaser":null},{
        "title": "[Travel] 2018-10 苗栗、台中",
        "excerpt":"\b10月的親子旅遊   2018-10-13 [苗栗] 四方\b鮮乳生態牧場     地址：苗栗縣竹南鎮崎頂里12鄰東崎頂9-6號   網站   剛在車上睡醒的兄弟倆     躺椅區     家庭聚會     樹間的藍天白雲     戰鬥滑草     完成滑草     全家合照     2018-10-13 ~ 2018-10-14 [\b台中] 大安濱海     私房行程   微笑豆花   來到台中大安或大甲，見到微笑豆花要捧場喔      滿滿紅豆、美味豆花，真的好吃；不好意思，這麼滿的紅豆只有我們有啦 😈      早晨灑在稻穗上的陽光     苗栗通霄白沙屯  拱天宮      廟會      傳統小吃     ","categories": ["travel"],
        "tags": [],
        "url": "http://localhost:4000/travel/travel-miaoli-taichung/",
        "teaser":null},{
        "title": "[日本] 2018-11 沖繩遊",
        "excerpt":"   準備好行囊，攜家帶眷創造回憶    2018-11-17(六) 第一天、飛向藍色Okinawa抵達  豬肉蛋飯糰 - ポークたまごおにぎり  空港1F店｜098-996-3588 | 07:00 ~ 22:00  口味：炸蝦、炸豆腐、炸苦瓜  注意：店內不能拍照   下飛機出關後到機場大廳右轉，搭乘電梯上到二樓，可看到國內線指標，沿著天橋走，到達國內線坐電梯到一樓，看到第一個水族館，在正對面   前往飯店  單軌列車 安里站 - Asato Station  機場國內線二樓   那霸阿扎特飯店 - Hotel Azat Ｎaha  安里站 | +81988630888 \b| Map Code：33-158-469*61   \b榮町超市 - りうぼう（RYUBO）   ##2018-11-18(二) 第二天、沖繩南部                                                                                                                                                                                                                                                                                                                                                                                          09:00 OTS到大廳接送至泊取車  \b購買美麗海洋館門票                  景點       MAP CODE       電話       地址       營業時間                       浦添大公園 -       33 312 072*06       +81 (0) 98-879-3219       沖縄県浦添市仲間1-9-2       09:00～21:00                 泊港漁市場 - 泊いゆまち魚市場       33 216 085*14       +81 (0) 98-868-1096       沖繩縣豐見城市瀨長174番地6       06:00～18:00                 玉泉洞 - ぎょくせんどう       232 495 248*03１       +81 (0) 98-949-7421       南城市玉城字前川1336       09:00～18:00                 知念岬公園 - chinen misaki park       232 594 503*30       +81 (0) 98-948-4660       沖繩縣 南城市 知念久手堅 523       自由參觀                 齋場御嶽 - せーふぁうたき       33 024 282*63       +81 (0) 98-949-1899       〒901-1511 沖縄県南城市知念字久手堅       09:00～18:00                 新原海灘 - mi-baru beach       232 470 604*63       NA       沖繩縣 南城市 玉城       自由參觀                 瀨長島 - Umikaji Terrace       33 002 602*22       +81 (0) 98-851-7446       沖繩縣豐見城市瀨長174番地6       10:00～21:00           泊港漁市場  新鮮刺身  生蠔  馬糞海膽   玉泉洞、王國村  \b挖珍珠  毒蛇博物館   新原海灘  玻璃船   瀨長島  幸福的鬆餅  33 002 603*82｜098-996-3588 | 07:00 ~ 22:00  口味：炸蝦、炸豆腐、炸苦瓜  注意：店內不能拍照   氾濫漢堡    2018-11-19(三) 第三天、沖繩北部                  景點       MAP CODE       電話       地址       營業時間                       名護鳳梨公園 - ナゴパイナップルパーク       206 716 467*77       +81 (0) 980-53-3659       〒905-0005 沖繩縣 名護市 為又1195       自由參觀                 名護自然動植物公園 - Neo Park Okinawa       206 689 727*02       +81 (0) 980-52-6348       沖繩縣名護市字名護4607-41       09:00～17:30                 古宇利島 - kouri island       485 662 804*11       NA       〒905-0406 沖繩縣今帰仁村古宇利       自由參觀                 美麗海水族館 - 美ら海水族館       553 075 797*74       +81 (0) 980-48-3748       沖〒905-0206 沖繩縣 國頭郡本部町 石川424       08:30～18:30                 美國村 - アメリカンヴィレッジ       33 526 450*63       NA       〒904-0115 沖繩縣 北谷町 美浜       11:00～22:00           古宇利島  古宇利海洋塔  古宇利沙灘  蝦蝦餐車   2018-11-20(四) 第四天、那霸市區   首里城  奧武山公園  波上宮  國際通  新都心  燒肉王 - 燒肉きんぐ  098-860-6038 | 17:00 ~ 24:00   2018-11-21(五) 第五天、飛回美麗家園  ","categories": ["travel"],
        "tags": [],
        "url": "http://localhost:4000/travel/travel-okinawa/",
        "teaser":null},{
        "title": "Packages",
        "excerpt":"My Packages.  紀錄開發工具所使用到的外掛元件或是第三方套件。   Atom  程式碼編輯器  Core Packages  autosave  Settings -&gt; Enabled  Community Packages  atom-runner  Add the following code to config.     runner:  extensions:    py: “/user/local/bin/python3”    file-icons  platformio-ide-terminal  markdown-writer  kite  Python code cloud IntelliSense.  ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/packages",
        "teaser":null},{
        "title": "Shortcuts",
        "excerpt":"Welcome to my shortcuts libraries.   The reason is I work in multiple platform for very short time, I cannot remember many skill while I changed the tool. The shortcuts of the tool is the most important feature for the user, I think if there have one place let me reference, and I can quickly use them no effort.   Mac OS  Reference Here      Command ⌘   Option ⌥   Shift  ⇧   Control ⌃   Mission Control                  Press this key       To do this                       ⌃ + Left arrow       Move left a space           Xcode  Reference Here   Table 1-3  Edit menu command shortcuts                  Press this key       To do this                       ⇧ + ⌘ + O       Open Quickly…                 ⌥ + ⌘ + L       Filter in Library                 ⇧ + ⌘ + F       Find in Workspace…           Table 1-5  Navigate menu command shortcuts                  Press this key       To do this                       ⌘ + L       Reveal in Project Navigator                 ⌘ + ‘       Jump to Next Issue           Table 1-7 Product menu command shortcuts                  Press this key       To do this                       ⌘ + R       Run                 ⌘ + B       Build                 ⇧ + ⌘ + K       Clean           Windows 10   Reference Here   Virtual desktops keyboard shortcuts                  Press this key       To do this                       Windows logo key + Tab       Open Task view                 Windows logo key + Ctrl + D       Add a virtual desktop                 Windows logo key + Ctrl + Right arrow       Switch between virtual desktops you’ve created on the right                 Windows logo key + Ctrl + Left arrow       Switch between virtual desktops you’ve created on the right           File Explorer keyboard shortcuts                  Press this key       To do this                       Alt + D       Select the address bar           Visual Studio   Run and Debug                  Mac       Windows       To do this                               Shift + F5       Stop Debugging                         Ctrl + Shift + F5       Restart                         F11       Step Into                         F10       Step Over           Eclipse                  Mac       Windows       To do this                               F3       Open Declaration                         Ctrl + F6       Next Editor           Run and Debug   Reference Here                  Mac       Windows       To do this                               Ctrl + F11       Run (Save and launch application)                         F11       Debug                         F5       Step Into                         F6       Step Over (line by line)                         F7       Step Return                         F8       Resume                         Ctrl + F5       Step Into Selection                         Ctrl + R       Run to Line                         Ctrl + Click       Hyperlink                         Ctrl + Alt + Click       Step Into Hyperlink           Atom   Reference HERE     組合快速鍵以此處為準   General                  Mac       Windows       To do this                       ⌘ + ,       Ctrl + ,       Preferences/Settings                 ⇧ +⌘ + P       Shift + Ctrl + P       Command Palette                 ⌃ + ⇧ + M       Ctrl + Shift + M       Toogle Preview                 ⌘ + \\       Ctrl + \\       Toggles Atom’s file Tree View           Visual Studio Code   Reference macOS HERE   General                  Mac       Windows       To do this                       ⇧ + ⌘ + P               Show Command Palette           Display                  Mac       Windows       To do this                       ⌘ + B       Ctrl + B       Toggle Sidebar visibility           SourceTree                  Mac       Windows       To do this                       Shift + Cmd + C       Ctrl + Shift + C       Commit          ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/docs/shortcuts",
        "teaser":null}]
